{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMRmPhbgPAmQPHzlqS4THHG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/forexfrancis50/Projects/blob/main/EURO%20BOT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WLNOURuVyKCi",
        "outputId": "5b2e5318-ab19-4fc6-878d-ded690998d84"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.11/dist-packages (0.2.57)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.32.3)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.3.7)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2025.2)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.4.6)\n",
            "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.11/dist-packages (from yfinance) (3.18.0)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.13.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.2.10)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (5.29.4)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.2.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.0.1)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.13.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.71.0)\n",
            "Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.13.0)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.7)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.9)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.15.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2025.4.26)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.8)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install yfinance pandas numpy scikit-learn tensorflow matplotlib\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, LSTM\n"
      ],
      "metadata": {
        "id": "3qGu-7L08C7C"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Download data from Yahoo Finance (example: EUR/USD)\n",
        "data = yf.download('EURUSD=X', start='2024-01-01', end='2025-02-05', interval='60m')\n",
        "\n",
        "# Display first few rows to inspect\n",
        "data.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "o7whXTLu8Xu7",
        "outputId": "392b8930-f82b-4620-aa6c-0c5c4abf03d9"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price                         Close      High       Low      Open   Volume\n",
              "Ticker                     EURUSD=X  EURUSD=X  EURUSD=X  EURUSD=X EURUSD=X\n",
              "Datetime                                                                  \n",
              "2024-01-01 18:00:00+00:00  1.105583  1.105583  1.105583  1.105583        0\n",
              "2024-01-01 19:00:00+00:00  1.105339  1.105583  1.105339  1.105583        0\n",
              "2024-01-01 20:00:00+00:00  1.104240  1.105339  1.103875  1.105339        0\n",
              "2024-01-01 21:00:00+00:00  1.105217  1.105217  1.104240  1.104240        0\n",
              "2024-01-01 22:00:00+00:00  1.104728  1.105094  1.104606  1.104850        0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba803c01-da13-420f-b26f-61e68571811e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>EURUSD=X</th>\n",
              "      <th>EURUSD=X</th>\n",
              "      <th>EURUSD=X</th>\n",
              "      <th>EURUSD=X</th>\n",
              "      <th>EURUSD=X</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Datetime</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-01-01 18:00:00+00:00</th>\n",
              "      <td>1.105583</td>\n",
              "      <td>1.105583</td>\n",
              "      <td>1.105583</td>\n",
              "      <td>1.105583</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 19:00:00+00:00</th>\n",
              "      <td>1.105339</td>\n",
              "      <td>1.105583</td>\n",
              "      <td>1.105339</td>\n",
              "      <td>1.105583</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 20:00:00+00:00</th>\n",
              "      <td>1.104240</td>\n",
              "      <td>1.105339</td>\n",
              "      <td>1.103875</td>\n",
              "      <td>1.105339</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 21:00:00+00:00</th>\n",
              "      <td>1.105217</td>\n",
              "      <td>1.105217</td>\n",
              "      <td>1.104240</td>\n",
              "      <td>1.104240</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 22:00:00+00:00</th>\n",
              "      <td>1.104728</td>\n",
              "      <td>1.105094</td>\n",
              "      <td>1.104606</td>\n",
              "      <td>1.104850</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba803c01-da13-420f-b26f-61e68571811e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba803c01-da13-420f-b26f-61e68571811e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba803c01-da13-420f-b26f-61e68571811e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-07939ee8-b5a2-4d0c-8dcb-96c1d1f1956f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07939ee8-b5a2-4d0c-8dcb-96c1d1f1956f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-07939ee8-b5a2-4d0c-8dcb-96c1d1f1956f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 6780,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Datetime\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-01-01 18:00:00+00:00\",\n        \"max\": \"2025-02-04 23:00:00+00:00\",\n        \"num_unique_values\": 6780,\n        \"samples\": [\n          \"2024-09-27 16:00:00+00:00\",\n          \"2024-12-02 02:00:00+00:00\",\n          \"2024-11-21 16:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"EURUSD=X\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02146540859247862,\n        \"min\": 1.019575834274292,\n        \"max\": 1.120824933052063,\n        \"num_unique_values\": 822,\n        \"samples\": [\n          1.051745891571045,\n          1.0794472694396973,\n          1.0968520641326904\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"EURUSD=X\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.021393515612947174,\n        \"min\": 1.0204081535339355,\n        \"max\": 1.1215791702270508,\n        \"num_unique_values\": 811,\n        \"samples\": [\n          1.0921800136566162,\n          1.0423181056976318,\n          1.070778489112854\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"EURUSD=X\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.021532246891700614,\n        \"min\": 1.0182262659072876,\n        \"max\": 1.1199462413787842,\n        \"num_unique_values\": 821,\n        \"samples\": [\n          1.0522992610931396,\n          1.0752688646316528,\n          1.0967316627502441\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"EURUSD=X\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02146529638938997,\n        \"min\": 1.0196797847747803,\n        \"max\": 1.1209505796432495,\n        \"num_unique_values\": 821,\n        \"samples\": [\n          1.0585371255874634,\n          1.07758629322052,\n          1.0975743532180786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"EURUSD=X\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Use 'Close' price for training the model\n",
        "data = data[['Close']]\n",
        "\n",
        "# Plot the closing price to visualize the data\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(data['Close'])\n",
        "plt.title('EUR/USD Closing Price')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Price')\n",
        "plt.show()\n",
        "\n",
        "# Normalize the data using MinMaxScaler\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "scaled_data = scaler.fit_transform(data)\n",
        "\n",
        "# Helper function to create a dataset with a given look-back window\n",
        "def create_dataset(data, look_back=60):\n",
        "    X, y = [], []\n",
        "    for i in range(len(data) - look_back):\n",
        "        X.append(data[i:i + look_back, 0])\n",
        "        y.append(data[i + look_back, 0])\n",
        "    return np.array(X), np.array(y)\n",
        "\n",
        "# Create dataset\n",
        "look_back = 60\n",
        "X, y = create_dataset(scaled_data, look_back)\n",
        "\n",
        "# Reshape X to be in the format [samples, time_steps, features] for LSTM\n",
        "X = np.reshape(X, (X.shape[0], X.shape[1], 1))\n",
        "\n",
        "# Split data into training and testing sets (80% train, 20% test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "EXislRLV8gAm",
        "outputId": "5dd236fb-285f-4ace-9651-eb4201df8978"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the LSTM model\n",
        "model = Sequential()\n",
        "\n",
        "# Add LSTM layer\n",
        "model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))\n",
        "model.add(LSTM(units=50, return_sequences=False))\n",
        "\n",
        "# Add a Dense layer for output\n",
        "model.add(Dense(units=1))\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='mean_squared_error')\n",
        "\n",
        "# Display model architecture\n",
        "model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "wkktaquS8j0k",
        "outputId": "b6c23d7f-0c07-4869-df90-2c081c46c800"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ lstm_2 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m50\u001b[0m)         │        \u001b[38;5;34m10,400\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ lstm_3 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)             │        \u001b[38;5;34m20,200\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m51\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ lstm_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">10,400</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ lstm_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">20,200</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">51</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m30,651\u001b[0m (119.73 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">30,651</span> (119.73 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m30,651\u001b[0m (119.73 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">30,651</span> (119.73 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# Plot the training loss\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(history.history['loss'], label='Train Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Model Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 918
        },
        "id": "xSGYtrKV8m9W",
        "outputId": "93039274-55c8-4b1d-840d-253162a46b15"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 47ms/step - loss: 2.2735e-04 - val_loss: 6.5879e-04\n",
            "Epoch 2/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 50ms/step - loss: 2.2113e-04 - val_loss: 6.4004e-04\n",
            "Epoch 3/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 63ms/step - loss: 2.5278e-04 - val_loss: 6.3665e-04\n",
            "Epoch 4/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 54ms/step - loss: 2.0810e-04 - val_loss: 5.8165e-04\n",
            "Epoch 5/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 53ms/step - loss: 1.9540e-04 - val_loss: 4.8399e-04\n",
            "Epoch 6/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 50ms/step - loss: 2.0121e-04 - val_loss: 6.7442e-04\n",
            "Epoch 7/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 47ms/step - loss: 1.8965e-04 - val_loss: 5.5083e-04\n",
            "Epoch 8/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 58ms/step - loss: 1.7411e-04 - val_loss: 4.8919e-04\n",
            "Epoch 9/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 57ms/step - loss: 1.7737e-04 - val_loss: 3.8015e-04\n",
            "Epoch 10/10\n",
            "\u001b[1m168/168\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 50ms/step - loss: 1.7184e-04 - val_loss: 4.1731e-04\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions on the test data\n",
        "predictions = model.predict(X_test)\n",
        "\n",
        "# Inverse transform to get the actual price values\n",
        "predictions = scaler.inverse_transform(predictions)\n",
        "y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))\n",
        "\n",
        "# Plot the results\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(y_test_actual, color='blue', label='Actual EUR/USD Price')\n",
        "plt.plot(predictions, color='red', label='Predicted EUR/USD Price')\n",
        "plt.title('EUR/USD Price Prediction')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Price')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "model.save('forex_lstm_model.h5')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "KK6Lz3up9Cu2",
        "outputId": "4dd81ab8-78b8-4e9c-f2d2-1332979a9a06"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m42/42\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2MAAAIjCAYAAACOHsPRAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzsnXd4FNX6xz+b3jsh9NB7LyKoFFFU7Ni4iKA/e8dr91q59t5QvKjYFRURKSJSpAgiJTTpvZNAEtKT3Z3fH2dnd7YlG0iym+T9PE+enTlzZubMZrOZ73zf874mTdM0BEEQBEEQBEEQhBolyN8DEARBEARBEARBqI+IGBMEQRAEQRAEQfADIsYEQRAEQRAEQRD8gIgxQRAEQRAEQRAEPyBiTBAEQRAEQRAEwQ+IGBMEQRAEQRAEQfADIsYEQRAEQRAEQRD8gIgxQRAEQRAEQRAEPyBiTBAEQRAEQRAEwQ+IGBMEQRAEID09nXHjxvl7GDXKnj17MJlMTJkyxd72zDPPYDKZquwcixYtwmQysWjRoio7piAIQl1BxJggCIKfmTJlCiaTyevPihUrAMeN82uvvebxOK+99homk4k9e/bY2wYPHux0rMjISLp168Zbb72F1Wr1OqaRI0dy0UUXATBu3DhiYmK89o2JiXETMXv27OHGG2+kdevWREREkJaWxjnnnMPTTz/t1M84vqCgIOLi4mjfvj1jxoxh3rx55b1tTowbN87pOuPi4ujevTuvv/46JSUlPh+npqmt4/bExIkTnUSdIAiCUDEh/h6AIAiCoHjuuedo2bKlW3ubNm1O67hNmzblxRdfBCArK4uvv/6a8ePHk5mZyfPPP+/Wv6ysjHnz5tn3qSw7duygb9++REZGctNNN5Gens7hw4dZs2YNL7/8Ms8++6zX8RUUFLBjxw6mTZvGl19+yTXXXMOXX35JaGhohecNDw9n8uTJAOTk5PDjjz/y4IMP8vfff/Ptt99WuP/WrVsJCqr5Z5SnO+6q5j//+Q+PPvpopfebOHEiKSkpbsL8nHPOoaioiLCwsCoaoSAIQt1BxJggCEKAcOGFF9KnT58qP258fDzXX3+9ff3222+nQ4cOvPvuuzz33HMEBwc79V+yZAl5eXmMGDHilM735ptvkp+fT0ZGBi1atHDaduzYsQrHB/DSSy9x7733MnHiRNLT03n55ZcrPG9ISIjTce68807OOOMMvvvuO9544w0aN27sto+maRQXFxMZGUl4eLivl1ilnO64q2M8ISFVd3sQFBRERERElR1PEAShLiFhioIgCPWMiIgI+vbtS15enkdxNGvWLDp16kR6evopHX/nzp00bdrUTYgBpKam+nSM4OBg3nnnHTp16sR7771Hbm5upccRFBTE4MGDAeyhm+np6Vx88cXMnTuXPn36EBkZyaRJk+zbXF2dnJwcxo8fT3p6OuHh4TRt2pQbbriBrKwse5+SkhKefvpp2rRpQ3h4OM2aNePhhx8+5TDDyo47JyeH+++/n2bNmhEeHk6bNm14+eWX3cJQc3JyGDduHPHx8SQkJDB27FhycnLczu9tztiXX35Jv379iIqKIjExkXPOOYfffvvNPr5Nmzbxxx9/2EMu9WvwNmfs+++/p3fv3kRGRpKSksL111/PwYMHnfroIbIHDx7k8ssvJyYmhgYNGvDggw9isVgq+c4KgiAEHuKMCYIgBAi5ublON/kAJpOJ5OTkKj+XPv8sISHBbdvs2bO5+OKLT/nYLVq04Pfff2fBggUMHTr0lI8THBzMqFGjePLJJ1m6dOkpOXU7d+4EcHoPt27dyqhRo7jtttu45ZZbaN++vcd98/PzOfvss9m8eTM33XQTvXr1IisrixkzZnDgwAFSUlKwWq1ceumlLF26lFtvvZWOHTuyYcMG3nzzTbZt28b06dNP6dp9HXdhYSGDBg3i4MGD3HbbbTRv3pw///yTxx57jMOHD/PWW28Bykm77LLLWLp0KbfffjsdO3bkp59+YuzYsT6N59lnn+WZZ55hwIABPPfcc4SFhfHXX3+xYMECzj//fN566y3uueceYmJieOKJJwBo2LCh1+NNmTKFG2+8kb59+/Liiy9y9OhR3n77bZYtW8batWudPpcWi4Xhw4dzxhln8Nprr/H777/z+uuv07p1a+64445KvrOCIAgBhiYIgiD4lU8//VQDPP6Eh4fb++3evVsDtFdffdXjcV599VUN0Hbv3m1vGzRokNahQwctMzNTy8zM1LZs2aI99NBDGqCNGDHC7Ri7du3SAG3hwoX2trFjx2rR0dFexx8dHa2NHTvWvr5x40YtMjJSA7QePXpo9913nzZ9+nStoKDAbd9BgwZpnTt39nrsn376SQO0t99+22sf4xj169yxY4f2wgsvaCaTSevWrZu9X4sWLTRA+/XXX92O0aJFC6freOqppzRAmzZtmltfq9WqaZqmffHFF1pQUJC2ZMkSp+0ffvihBmjLli2r1nFPmDBBi46O1rZt2+bU/uijj2rBwcHavn37NE3TtOnTp2uA9sorr9j7mM1m7eyzz9YA7dNPP7W3P/3005rx9mD79u1aUFCQdsUVV2gWi8Xj+6Bpmta5c2dt0KBBbte4cOFCp89UaWmplpqaqnXp0kUrKiqy95s5c6YGaE899ZTT+wNozz33nNMxe/bsqfXu3dvtXIIgCLUNccYEQRAChPfff5927do5tbnO5zoVtmzZQoMGDZzaLr30Uj7++GO3vrNmzSI+Pp6zzjrrlM/XuXNnMjIymDBhAjNnziQjI4O3336bmJgY3njjDW655Rafj6VncczLy6uwb0FBgdt1DhgwgC+++MKprWXLlgwfPrzC4/344490796dK664wm2bHsb3/fff07FjRzp06ODkauqO4MKFCxkwYEC1jfv777/n7LPPJjEx0en8w4YN46WXXmLx4sWMHj2a2bNnExIS4uQkBQcHc88997BkyZJyxzd9+nSsVitPPfWUW4KTU0mBv2rVKo4dO8YzzzzjNJdsxIgRdOjQgVmzZrklebn99tud1s8++2y390cQBKE2ImJMEAQhQOjXr1+VJPBwvUFOT0/nf//7H1arlZ07d/L888+TmZnpManCrFmzOP/88yudwMH1nO3ateOLL77AYrHwzz//MHPmTF555RVuvfVWWrZsybBhw3w6bn5+PgCxsbEV9o2IiOCXX34BVIbCli1b0rRpU7d+njJWemLnzp2MHDmy3D7bt29n8+bNbmJKx9OcPFdOZ9zbt29n/fr1FZ5/7969NGrUyK1EgbcQTSM7d+4kKCiITp06VdjXF/bu3ev13B06dGDp0qVObREREW7Xl5iYSHZ2dpWMRxAEwZ+IGBMEQagl6OKpqKjI4/bCwkKnfjrR0dFO4mfgwIH06tWLxx9/nHfeecdp/0WLFvHBBx+4nbekpARN09xEl2bL6uctW15wcDBdu3ala9eunHnmmQwZMoSvvvrKZzG2ceNGwLf0/sHBwT4dtyozEFqtVrp27cobb7zhcXuzZs0qPMbpjNtqtXLeeefx8MMPe9zH1WmtjVSFOywIghCoiBgTBEGoJTRo0ICoqCi2bt3qcfvWrVuJiooiJSWl3ON069aN66+/nkmTJvHggw/SvHlzABYsWEBJSQkXXnihU/8WLVpgNpvZuXOnmyjasWMHFovFY+ZEV3TX7/DhwxX2BZW44euvvyYqKuq0wiZPldatW9vFYHl91q1bx7nnnntKIXunS+vWrcnPz69QzLVo0YL58+eTn5/v5I55+yy5nsNqtfLPP//Qo0cPr/18vX79s7J161a3BC9bt2716bMkCIJQV5DU9oIgCLWE4OBgzj//fH755Rf27dvntG3fvn388ssvnH/++T45CQ8//DBlZWVOjs7s2bPp06ePWxY8XZy99957bsd5//33nfqAqlNWVlbm1nf27NmAb6FxFouFe++9l82bN3PvvfcSFxdX4T5VzciRI1m3bh0//fST2zZN0wC45pprOHjwIP/73//c+hQVFVFQUFCtY7zmmmtYvnw5c+fOdduWk5OD2WwG4KKLLsJsNju5nhaLhXfffbfCc1x++eUEBQXx3HPPuaXL198HUA6sp1T5rvTp04fU1FQ+/PBDp/T/c+bMYfPmzadc304QBKE2Is6YIAhCgDBnzhy2bNni1j5gwABatWoFwAsvvED//v3p1asXt956K+np6ezZs4ePPvoIk8nECy+84NO5OnXqxEUXXcTkyZN58sknSU5OZvbs2dx4441ufXv06MHNN9/M22+/zfbt2znvvPMAmDdvHrNnz+bmm2+me/fu9v4vv/wyq1ev5sorr6Rbt24ArFmzhs8//5ykpCTuv/9+p+Pn5uby5ZdfAipUcseOHUybNo2dO3dy3XXXMWHCBJ+uqap56KGH+OGHH7j66qu56aab6N27NydOnGDGjBl8+OGHdO/enTFjxjB16lRuv/12Fi5cyMCBA7FYLGzZsoWpU6fa64JV5xhnzJjBxRdfzLhx4+jduzcFBQVs2LCBH374gT179pCSksIll1zCwIEDefTRR9mzZw+dOnVi2rRpPtVva9OmDU888QQTJkzg7LPP5sorryQ8PJy///6bxo0b8+KLLwLQu3dvPvjgA/773//Spk0bUlNTPZY2CA0N5eWXX+bGG29k0KBBjBo1yp7aPj09nfHjx1f5+yQIghCw+DeZoyAIglBeantc0o5rmqZt3rxZu/baa7XU1FQtJCRES01N1a677jpt8+bNbscuL3X8okWLNEB7+umntY0bN2qAtnLlSo99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OXJkuf3CwsJo06YN6enpbkLMF7p27YrVauWPP/7wuL1Xr15s2rSJ9PR02rRp4/RTkdCrC4gYE3wmkkLe5W645Rao5BMmQags4oYJgiDUPmbOnEl2djb/93//R5cuXZx+Ro4cac+g9/TTT/PNN9/w9NNPs3nzZjZs2ODkjKSnp7N48WIOHjxoF1ODBw8mMzOTV155hZ07d/L+++8zZ84cp/O3bduWL774gs2bN/PXX38xevToU3LhSkpKOHLkiNOPUdQ98MADTJ48mYkTJ7J9+3YyMjK49dZbyc7O5uabby732Lfddhvbtm3jxx9/BFRGRNcQxdGjR2MymbjhhhtYvXo1O3bs4JNPPuGtt97i3//+t73fVVddxZtvvslff/3F3r17WbRoEXfddRft2rWjQ4cObtdz8OBB1qxZwwsvvMBll13GxRdfzA033FDp96cypKenM3bsWG666SamT5/O7t27WbRoEVOnTgXgrrvu4sSJE4waNYq///6bnTt3MnfuXG688UY3QV4XETEm+MyjvMTdvA+TJ8Prr/t7OIIgCIIgBBgff/wxw4YNcwvVAxg5ciSrVq1i/fr1DB48mO+//54ZM2bQo0cPhg4dysqVK+19n3vuOfbs2UPr1q3t85E6duzIxIkTef/99+nevTsrV650S+H+8ccfk52dTa9evRgzZgz33nsvqacw8fjXX3+lUaNGTj9nnXWWffuoUaOYPHkyn3zyCb179+aCCy7gyJEjLF68mIYNG5Z77KSkJG644QaeeeYZrFarRzGWkJDAkiVLKCsr49JLL6VHjx688847vPHGG9x22232fsOHD+eXX37hkksuoV27dowdO5YOHTrw22+/OdUO068nPT2dCy64gIULF/LOO+/w888/ExwcXOn3p7J88MEHXHXVVdx555106NCBW265xe7cNW7cmGXLlmGxWDj//PPp2rUr999/PwkJCQQF1X2pYtI8lQCv55w8eZL4+Hhyc3OJi4vz93ACApNJYyvtacd21TBwICxd6t9BCXWaKVPgxhvVsnxLCYJQ3yguLmb37t1OtZuEuseaNWsYOnQomZmZ5YYeCtVPeX9z1akN6r7cFKqENI44hBjA6tUSqihUKyLABEEQhLqO2Wzm3XffFSFWj/GrGNPTbzZu3BiTycT06dMr3GfRokX06tXLXr3bU9XwgwcPcv3115Oc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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "# Calculate MAE and MSE\n",
        "mae = mean_absolute_error(y_test_actual, predictions)\n",
        "mse = mean_squared_error(y_test_actual, predictions)\n",
        "\n",
        "print(f'Mean Absolute Error: {mae}')\n",
        "print(f'Mean Squared Error: {mse}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HdTZ3zFC9I6b",
        "outputId": "f9143779-19ca-40f0-a5e6-3f0430e444b8"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error: 0.0015218575440701983\n",
            "Mean Squared Error: 4.277985653870313e-06\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "# Load your trained model\n",
        "model = tf.keras.models.load_model('/path/to/your_saved_model.h5')  # Update with actual path\n",
        "\n",
        "# Function to get last 60 hourly candles\n",
        "def get_live_data(symbol='EURUSD=X', look_back=60):\n",
        "    now = datetime.utcnow()\n",
        "    start = (now - timedelta(hours=look_back+1)).strftime('%Y-%m-%d')\n",
        "    end = (now + timedelta(days=1)).strftime('%Y-%m-%d')\n",
        "\n",
        "    df = yf.download(symbol, start=start, end=end, interval='60m', progress=False)\n",
        "    df = df[['Close']]\n",
        "    df.dropna(inplace=True)\n",
        "    return df\n",
        "\n",
        "# Prepare the input for prediction\n",
        "def preprocess_input(df, scaler, look_back=60):\n",
        "    data = scaler.transform(df.values)\n",
        "    X = data[-look_back:].reshape(1, look_back, 1)\n",
        "    return X\n",
        "\n",
        "# Determine direction based on predicted movement\n",
        "def determine_direction(current_price, predicted_price):\n",
        "    return 'UP' if predicted_price > current_price else 'DOWN'\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "yNsmM5aHIATX",
        "outputId": "2e229678-7f2d-4646-a46a-a3555775faf7"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] Unable to synchronously open file (unable to open file: name = '/path/to/your_saved_model.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-d8c366233e40>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Load your trained model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/path/to/your_saved_model.h5'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Update with actual path\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Function to get last 60 hourly candles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_api.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile, safe_mode)\u001b[0m\n\u001b[1;32m    194\u001b[0m         )\n\u001b[1;32m    195\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\".h5\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\".hdf5\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 196\u001b[0;31m         return legacy_h5_format.load_model_from_hdf5(\n\u001b[0m\u001b[1;32m    197\u001b[0m             \u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/legacy/saving/legacy_h5_format.py\u001b[0m in \u001b[0;36mload_model_from_hdf5\u001b[0;34m(filepath, custom_objects, compile)\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0mopened_new_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mopened_new_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilepath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    562\u001b[0m                                  \u001b[0mfs_persist\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfs_persist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfs_threshold\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfs_threshold\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    563\u001b[0m                                  fs_page_size=fs_page_size)\n\u001b[0;32m--> 564\u001b[0;31m                 \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muserblock_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfcpl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mswmr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mswmr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    565\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    236\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 238\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    239\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to synchronously open file (unable to open file: name = '/path/to/your_saved_model.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
          ]
        }
      ]
    },
    {
      "source": [
        "import time\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "# Load your trained model\n",
        "# Replace 'forex_lstm_model.h5' with the actual path if it's in a different directory\n",
        "model = tf.keras.models.load_model('forex_lstm_model.h5')\n",
        "\n",
        "# Function to get last 60 hourly candles\n",
        "def get_live_data(symbol='EURUSD=X', look_back=60):\n",
        "    now = datetime.utcnow()\n",
        "    start = (now - timedelta(hours=look_back+1)).strftime('%Y-%m-%d')\n",
        "    end = (now + timedelta(days=1)).strftime('%Y-%m-%d')\n",
        "\n",
        "    df = yf.download(symbol, start=start, end=end, interval='60m', progress=False)\n",
        "    df = df[['Close']]\n",
        "    df.dropna(inplace=True)\n",
        "    return df\n",
        "\n",
        "# Prepare the input for prediction\n",
        "def preprocess_input(df, scaler, look_back=60):\n",
        "    data = scaler.transform(df.values)\n",
        "    X = data[-look_back:].reshape(1, look_back, 1)\n",
        "    return X\n",
        "\n",
        "# Determine direction based on predicted movement\n",
        "def determine_direction(current_price, predicted_price):\n",
        "    return 'UP' if predicted_price > current_price else 'DOWN'"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_VCYORRzJJNN",
        "outputId": "2e84087d-2f0b-4ca8-b7fd-9f4cdb1513bc"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        }
      ]
    },
    {
      "source": [
        "import time\n",
        "from datetime import datetime, timedelta\n",
        "import joblib  # Import joblib for saving and loading the scaler\n",
        "import yfinance as yf\n",
        "import tensorflow as tf\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Load your trained model\n",
        "# Replace 'forex_lstm_model.h5' with the actual path if it's in a different directory\n",
        "model = tf.keras.models.load_model('forex_lstm_model.h5')\n",
        "\n",
        "# Function to get last 60 hourly candles\n",
        "def get_live_data(symbol='EURUSD=X', look_back=60):\n",
        "    now = datetime.utcnow()\n",
        "    start = (now - timedelta(hours=look_back+1)).strftime('%Y-%m-%d')\n",
        "    end = (now + timedelta(days=1)).strftime('%Y-%m-%d')\n",
        "\n",
        "    df = yf.download(symbol, start=start, end=end, interval='60m', progress=False)\n",
        "    df = df[['Close']]\n",
        "    df.dropna(inplace=True)\n",
        "    return df\n",
        "\n",
        "# Prepare the input for prediction\n",
        "def preprocess_input(df, scaler, look_back=60):\n",
        "    data = scaler.transform(df.values)\n",
        "    X = data[-look_back:].reshape(1, look_back, 1)\n",
        "    return X\n",
        "\n",
        "# Determine direction based on predicted movement\n",
        "def determine_direction(current_price, predicted_price):\n",
        "    return 'UP' if predicted_price > current_price else 'DOWN'\n",
        "\n",
        "# Assume you saved the original scaler used during training\n",
        "# Replace 'scaler.save' with the desired filename and path\n",
        "scaler_filename = 'scaler.save'\n",
        "try:\n",
        "    scaler = joblib.load(scaler_filename)\n",
        "except FileNotFoundError:\n",
        "    print(f\"Scaler file '{scaler_filename}' not found. Creating a new scaler.\")\n",
        "    # If the file doesn't exist, create a new scaler\n",
        "    # (Make sure you're using the original data or have it available here)\n",
        "    # Download data from Yahoo Finance (example: EUR/USD) - you might need to adjust dates\n",
        "    data = yf.download('EURUSD=X', start='2024-01-01', end='2025-02-05', interval='60m')\n",
        "    data = data[['Close']]\n",
        "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "    scaler.fit(data)\n",
        "    # Save the scaler for future use\n",
        "    joblib.dump(scaler, scaler_filename)\n",
        "\n",
        "look_back = 60  # 60 hours of history for each prediction\n",
        "\n",
        "while True:\n",
        "    try:\n",
        "        # Get and prepare live data\n",
        "        df = get_live_data()\n",
        "        X_live = preprocess_input(df, scaler, look_back)\n",
        "\n",
        "        # Make prediction\n",
        "        predicted_price = model.predict(X_live)[0][0]\n",
        "        current_price = df.iloc[-1].values[0]\n",
        "\n",
        "        direction = determine_direction(current_price, scaler.inverse_transform([[predicted_price]])[0][0])\n",
        "\n",
        "        # Timestamp and Signal Output\n",
        "        print(f\"[{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Signal: {direction}\")\n",
        "\n",
        "        # Sleep until next hour\n",
        "        now = datetime.utcnow()\n",
        "        next_run = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)\n",
        "        time_to_wait = (next_run - now).total_seconds()\n",
        "        time.sleep(time_to_wait)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error: {e}\")\n",
        "        time.sleep(300)  # Retry after 5 minutes if error occurs"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4eR9m6OoJgwJ",
        "outputId": "b489d4c0-32be-4801-8c7b-3d937f236999"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n",
            "[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Scaler file 'scaler.save' not found. Creating a new scaler.\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 481ms/step\n",
            "[2025-05-02 13:18:37 UTC] Signal: UP\n"
          ]
        }
      ]
    }
  ]
}